{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","money","setMoney","_useState3","_useState4","hasLemonade","setHasLemonade","_useState5","_useState6","hasLemonadePurchaser","setHasLemonadePurchaser","useInterval","_useState7","_useState8","hasIceCream","setHasIceCream","items","hasItem","setHasItem","itemPrice","setHasPurchaser","hasPurchaser","purchaserPrice","imageUrl","standPrice","name","purchase","func","value","price","react_default","a","createElement","className","map","item","src","alt","onClick","num","arguments","length","undefined","sell","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAoGeA,MAhGf,WAAe,IAAAC,EACaC,mBAAS,KADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAGyBN,mBAAS,GAHlCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNE,EAHMD,EAAA,GAGOE,EAHPF,EAAA,GAAAG,EAI2CV,mBAAS,GAJpDW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAINE,EAJMD,EAAA,GAIgBE,EAJhBF,EAAA,GAObG,YACE,kBAAMT,EAHc,EAGWO,EAAuBR,IACtD,KATW,IAAAW,EAYyBf,oBAAS,GAZlCgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAYNE,EAZMD,EAAA,GAYOE,EAZPF,EAAA,GAcPG,EAAQ,CACZ,CACEC,QAASZ,EACTa,WAAYZ,EACZa,UAbkB,EAelBC,gBAAiBV,EACjBW,aAAcZ,EACda,eAAgB,GAEhBC,SAAU,eACVC,WAAY,IACZC,KAAM,kBAER,CACER,QAASH,EACTI,WAAYH,EACZI,UAAW,GAEXE,cAAc,EACdD,gBAAiB,aACjBE,eAAgB,UAEhBC,SAAU,gBACVC,WAAY,IACZC,KAAM,oBAQJC,EAAW,SAACC,EAAMC,EAAOC,GAC7BF,EAAKC,EAAQ,GACb1B,EAASD,EAAQ4B,IAGnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,OACIhC,EACF6B,EAAAC,EAAAC,cAAA,UACGhB,EAAMkB,IAAI,SAAAC,GAAI,OACbL,EAAAC,EAAAC,cAAA,UACGG,EAAKlB,QAAU,GACda,EAAAC,EAAAC,cAAA,OACEI,IAAKD,EAAKZ,SACVc,IAAKF,EAAKV,KACVa,QAAS,kBApBZ,WAAa,IAAZC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,EAClBtC,EAASD,EAAQsC,GAmBYI,CAAKR,EAAKhB,cAI5BlB,GAASkC,EAAKX,aAAeW,EAAKlB,SACjCa,EAAAC,EAAAC,cAAA,UACEM,QAAS,kBACPZ,EAASS,EAAKjB,WAAYiB,EAAKlB,QAASkB,EAAKX,cAFjD,YAIYW,EAAKV,MAIlBU,EAAKlB,QAAU,GAAKhB,GAASkC,EAAKb,gBACjCQ,EAAAC,EAAAC,cAAA,UACEM,QAAS,kBACPZ,EACES,EAAKf,gBACLe,EAAKd,aACLc,EAAKb,kBALX,YAQYa,EAAKV,KARjB,iBCrEImB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c82ba822.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport useInterval from 'use-interval';\nimport './App.css';\n\nfunction App() {\n  const [money, setMoney] = useState(100);\n\n  const [hasLemonade, setHasLemonade] = useState(0);\n  const [hasLemonadePurchaser, setHasLemonadePurchaser] = useState(0);\n  const lemonadePrice = 3;\n\n  useInterval(\n    () => setMoney(lemonadePrice * hasLemonadePurchaser + money),\n    1000,\n  );\n\n  const [hasIceCream, setHasIceCream] = useState(false);\n\n  const items = [\n    {\n      hasItem: hasLemonade,\n      setHasItem: setHasLemonade,\n      itemPrice: lemonadePrice,\n\n      setHasPurchaser: setHasLemonadePurchaser,\n      hasPurchaser: hasLemonadePurchaser,\n      purchaserPrice: 50,\n\n      imageUrl: 'lemonade.jpg',\n      standPrice: 100,\n      name: 'Lemonade Stand',\n    },\n    {\n      hasItem: hasIceCream,\n      setHasItem: setHasIceCream,\n      itemPrice: 10,\n\n      hasPurchaser: false,\n      setHasPurchaser: () => {},\n      purchaserPrice: 999999999,\n\n      imageUrl: 'ice cream.jpg',\n      standPrice: 150,\n      name: 'Ice Cream Stand',\n    },\n  ];\n\n  const sell = (num = 1) => {\n    setMoney(money + num);\n  };\n\n  const purchase = (func, value, price) => {\n    func(value + 1);\n    setMoney(money - price);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Â£{money}\n        <ul>\n          {items.map(item => (\n            <li>\n              {item.hasItem > 0 && (\n                <img\n                  src={item.imageUrl}\n                  alt={item.name}\n                  onClick={() => sell(item.itemPrice)}\n                />\n              )}\n\n              {money >= item.standPrice && !item.hasItem && (\n                <button\n                  onClick={() =>\n                    purchase(item.setHasItem, item.hasItem, item.standPrice)\n                  }>\n                  Purchase {item.name}\n                </button>\n              )}\n\n              {item.hasItem > 0 && money >= item.purchaserPrice && (\n                <button\n                  onClick={() =>\n                    purchase(\n                      item.setHasPurchaser,\n                      item.hasPurchaser,\n                      item.purchaserPrice,\n                    )\n                  }>\n                  Purchase {item.name} Buyer\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}